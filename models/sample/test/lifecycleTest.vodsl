/*
 *  created on 8 Feb 2022 
 */
 
 model lifecycleTest (0.1) "shows how lifecycles/aggregation could work" author "pharriso"
 
 include "https://raw.githubusercontent.com/ivoa/vodsl-models/master/IVOA-v1.0.vodsl"
  
 otype ReferredTo { // this referred to otype is not affected by the lifecycle of other instances in the model 
 	test1: ivoa:integer "";
 }
 
 otype ReferredLifeCycle { // this is affected by the lifecycle of the Atest otype
 	test3: ivoa:string "";
 } 
 
 otype Contained "" {
 	test2: ivoa:string "";
/* below is *really* bad (i.e. breaks the generated code json serialization intention as the
   it them moves where the referred to things are apparently contained - as the JSON referencing mechanism
   currently in place will output the real object first and then the reference - so it need to come across the "contained"
   object first - TODO try to express this restriction in schematron.
*/
// 	refbad2 references ReferredLifeCycle "";/* this is bad because one of the places that Contained could be contained - i.e Atest3 is not in the ReferredLifeCycle containment hierarchy */
 }
 
otype ATest { //this does things as per current rules
	ref1 references ReferredTo "";
	contained : Contained @+ as composition "";
	refandcontained : ReferredLifeCycle @+ as composition "";
	contained2 : ATest4 as composition "";
}

otype ATest2 {
	
	/*  would like to make the multiplicity of below one-or-more - however this is not liked because 
	 *  of "aggregation pattern", but really ok for references - 
     it is more a lifecycle matter really - as long as there is nothing that can 
	                                     * delete the referredTo otype */
	                                     
	refagg @+ references ReferredTo  "";                                      
	atest : ATest as composition "";
	                                     
	refcont references ReferredLifeCycle ""; // potentially not OK (should be an error if referenced by something outside the object tree) - here the referred otype is also contained, so the 
	}

otype ATest3 { /*  fails the "unique composition rule" in schematron if the one of the Contained instances is also contained in ATest,
 *  but this should be unlikely if a contained type instance is created at the same time as its container instance.
	*/
	contained : Contained @+ as composition ""; //vodsl tooling does not flag this- but the vodml schematron does.
	refBad @? references ReferredLifeCycle ""; //this should be lifecycle warning
}

otype ATest4 {
	lowr references ReferredLifeCycle "";
}