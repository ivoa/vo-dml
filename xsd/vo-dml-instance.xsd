<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns="http://volute.googlecode.com/dm/vo-dml-instance/v0.x" 
	xmlns:vo-dml="http://volute.googlecode.com/dm/vo-dml/v0.9" 
	targetNamespace="http://volute.googlecode.com/dm/vo-dml-instance/v0.x" 
	attributeFormDefault="unqualified"
	elementFormDefault="unqualified">
   <xsd:import namespace="http://volute.googlecode.com/dm/vo-dml/v0.9"
               schemaLocation="http://volute.googlecode.com/svn/trunk/projects/dm/vo-dml/xsd/vo-dml.xsd"/>

  <xsd:annotation>
    <xsd:documentation>
      This schema defines a standard serialisation format for the VO-DML meta-model.
      It allows one to create instance documents for models defined via a VO-DML document.
      It does so in a way that is the same for each model, i.e. does NOT create new types for different models.
      This is in contrast to for example the instance documents that would arise from a mapping to XML schema for example.

      This is NOT intended to provide a standard serialisation format for these models, but to provide a standard
      target for translational semantics. IF a VOTable for example can be translated to such a document, 
      it has been annotated correctly.
    </xsd:documentation>
  </xsd:annotation>

  <!-- +++++++++++++++++++ Begin of 'UTYPE section' +++++++++++++++++++ -->

  <xsd:simpleType name="UTYPE">
    <xsd:annotation>
      <xsd:documentation>
      This simpleType allows concatenation of vo-dml:UTYPE-sThis in contrast to the normalized version in vo-dml-instance_utype_normalized.xsd
      TBD define the pattern, is the one below correct?
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
    <xsd:pattern value="([a-zA-Z0-9/:.])+(['+']{1}([a-zA-Z0-9/:.])+)*"></xsd:pattern>
    </xsd:restriction>
  </xsd:simpleType>
  
  
  <xsd:complexType name="Instance">
    <xsd:sequence>
      <xsd:element name="model" type="Model" minOccurs="1" maxOccurs="unbounded"/>
      <xsd:element name="object" type="Object" minOccurs="0" maxOccurs="unbounded"/>
	</xsd:sequence>  
  </xsd:complexType>

  <xsd:complexType name="Model">
    <xsd:sequence>
      <xsd:element name="model-location" type="xsd:anyURI"/>
      <xsd:element name="utype-prefix" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Object">
    <xsd:sequence>
    <xsd:element name="utype" type="UTYPE"/>
    <xsd:element name="id" type="ObjectId"/>
    <xsd:element name="attribute" type="Attribute" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="collection-element" type="Collection" minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="reference" type="Reference" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ObjectId">
    <xsd:annotation>
      <xsd:documentation>
      Wrapper type for an Object Identifier.
      Allows one to generalise this ObjectId without needing to redefine the usage of that concept.
      For example could allow us to have various types of identifiers.
      Or to add links to one or more remote instances of this same object, say in a database,
      or an XML document based on some mapping of the data model to XML schema.
      All these other elements should have minOccurs="0". For it should not be necessary to use these other
      elements in the ObjectId that is used inside the Reference type.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="uri-id" type="xsd:anyURI">
      <xsd:annotation>
      <xsd:documentation>
      Fundamental identifying element that must be unique in this document.
      Could be simply a string. Must have a uniqueness constraint added.
      </xsd:documentation>
      </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Attribute" abstract="true">
    <xsd:sequence>
      <xsd:element name="utype" type="vo-dml:UTYPE"/>
      <xsd:element name="datatype" type="vo-dml:UTYPE" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
          IF the datatype of the value given to an attribute is a sub-type of the dataty[pe declared on the attribute,
          This element MUST be used to point at the actual type.
          This is similar/equivalent to the xsi:type mechanism to indicate subclasses in XML documents.
          If this element is not provided, the declared type is assumed.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AtomicAttribute">
    <xsd:complexContent >
      <xsd:extension base="Attribute">
        <xsd:sequence>
          <xsd:element name="value" type="xsd:string"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="StructuredAttribute">
    <xsd:complexContent >
      <xsd:extension base="Attribute">
        <xsd:sequence>
          <xsd:element name="attribute" type="Attribute" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="Collection">
    <xsd:sequence>
      <xsd:element name="utype" type="vo-dml:UTYPE">
        <xsd:annotation>
          <xsd:documentation>
          The utype of the Collection definition.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="object" type="Object" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
          Objects contained in a parent container are always serialized inside the container.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Reference">
    <xsd:sequence>
      <xsd:element name="utype" type="vo-dml:UTYPE"/>
      <xsd:element name="object-doc" type="xsd:anyURI" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
          Instance document containing the referenced object.
          If not specified the current document is intended.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ref-id" type="ObjectId">
        <xsd:annotation>
          <xsd:documentation>
          The id of the referenced object in the document indicated by object-doc.
          I.e. in this serialization format referenced objects are NEVER contained within the referrer.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>


  <xsd:element name="instance" type="Instance">
    <xsd:unique name="unique-ids">
      <xsd:selector xpath=".//object/id"/>
      <xsd:field xpath="uri-id"/>
    </xsd:unique>
  </xsd:element>


</xsd:schema>
