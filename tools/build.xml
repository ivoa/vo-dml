<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE project [ 
<!ENTITY buildJava SYSTEM "./build_java.xml">
<!ENTITY buildJalopy SYSTEM "./build_jalopy.xml">
]>

<project name="VO-DML-builder" default="run_vo-dml" basedir=".">

  <description>
    This build file can be considered as the transformer tool for any data model in VO-DML format, 
    the official IVOA VO-DML data model language.
    Such files can be generated from an xmi file formatted with MagicDraw CE 12.1. [TODO add more info about this].
    But can also be written by hand or generated any other way.
    Further targets exist for 
    - updating utype-s of a VO-DML file with a version conforming to the UTYPEs grammar 
    	[TODO define this explicitly].
    - validating a vo-dml file.
   	- generating HTML documentation with UTYPE assignments (html) 
    - generating GraphViz file + PNG image +cmap for use in generated HTML file.

		Note: the targets starting with run_ generally require ant-contrib to be available.
		See http://ant-contrib.sourceforge.net/
		This will allow one to run targets for multiple models in one go.
		Otherwise the targets without the run_ must be used.
		TBD do a check if ant-contrib exists and 
		
		
    TODO: add other generation targets, e.g. XML schema, TAP, DDL, Java. 
    	In VO-URP we had XSLT for that as well, 
    	we may decide for alternative generation mechanisms here.
    
    Authors : lemson@mpa-garching.mpg.de, [Laurent Bourges]
    
    Version : 2012-11-23
    </description> 


  <property file="build.properties" />
  <property file="${model}/vo-dml.properties" />
  <property name="ant.contrib.jar" value="./libs/ant-contrib-0.6.jar"/>

  <!-- define XSLT2 task -->
  <presetdef name="xslt2">
    <!-- The processor=SaxonLiaison setting causes our custom XSLTLiaison class to be used. -->
    <!-- This works around bug #41314: http://issues.apache.org/bugzilla/show_bug.cgi?id=41314 -->
    <xslt force="true" classpath="./libs/saxon9.jar:./libs/ant-trax.jar:./libs" processor="SaxonLiaison">
      <outputproperty name="{http://saxon.sf.net/}indent-spaces" value="2" />
    </xslt>
  </presetdef>

  <target name="set-ant-contrib" if="ant.contrib.jar">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
	<pathelement location="${ant.contrib.jar}" />
      </classpath>
    </taskdef>
  </target>

  <!-- allow use of schematron to validate vo-dml -->
  <!--
     <taskdef name="schematron" classname="com.schematron.ant.SchematronTask" classpath="./libs/ant-schematron-2010-04-14.jar" />
  -->
  <!-- set global properties for this build   -->

  <!-- get build properties (model dependent) -->
  <tstamp>
    <format property="build.date" pattern="yyyy-MM-dd HH:mm:ss" />
  </tstamp>

  <!-- unused/obsolete ???
  <property name="source_checked" value="${dm.filename.prefix}_CHECK.xml" />
  <property name="paths.target" value="${dm.filename.prefix}.paths.html" />
  <property name="paths.target.xml" value="${dm.filename.prefix}.paths.xml" />
  <property name="pojo.target" value="${dm.filename.prefix}.pojo.xml" />
  <property name="uml" location="./uml" />
  <property name="build" location="./build"/>
  <property name="build.jaxb" location="${build}/jaxb" />
  <property name="build.jaxb.jar" value="vo-dml.jaxb.jar" />
  <property name="build.src" location="${build}/src" />
  <property name="build.src.jar" value="vo-dml.src.jar" />
  <property name="build.gen" location="${build}/gen" />
  <property name="build.gen.jar" value="vo-dml.models.jar" />
  -->

  <!-- locations of support code/modules -->
  <property name="libs" location="./libs" />
  <property name="xsd"  location="../xsd" />
  <property name="xslt" location="./xslt" />

  <!-- vo-dml generation properties -->
  <property name="vo-dml.dir" value="${model}" />
  <property name="vo-dml.source" value="${dm.filename.prefix}.vo-dml.xml" />

  <property name="html.dir" value="${model}" />
  <property name="html.target" value="${dm.filename.prefix}.html" />
  <property name="graphviz.gvd" value="${dm.filename.prefix}.gvd" />
  <property name="graphviz.png" value="${dm.filename.prefix}.png" />
  <property name="graphviz.map" value="${dm.filename.prefix}.cmap" />
  <property name="graphviz.map.placeholder" value="___GRAPHVIZ_MAP___" />


   <!-- java generation properties -->
   <property name="python.dir" value="./python/${model}" />
   <property name="python.target" value="${dm.filename.prefix}.py" />

  <!-- java generation properties -->
  <property name="rdf.target" value="${dm.filename.prefix}.ttl"/>
  <property name="java.gen" location="./java/gen" />
  <property name="sources.gen" location="${java.gen}" />
  <property name="sources" location="./java/src" />
  <property name="jaxb" location="./java/jaxb" />
  <property name="jaxb.preserve" location="./java/jaxb-preserve" />
  <property name="jaxb.libs" location="${libs}/jaxb" />

  <!-- schema generation properties -->
  <property name="xsd.gen" location="./models-xsd" />
  
  
  <fileset id="jarfiles" dir="${libs}">
    <!-- eclipselink (2.2.0) JPA 2.0 reference implementation -->
    <include name="eclipselink.jar" />
    <include name="kxml2-2.3.0.jar" />
    <include name="mongo-java-driver-2.9.3.jar" />
  </fileset>

  <!-- target about : -->
  <target name="about" depends="init" description="show information for public targets">
    <echo>available ant targets : </echo>
    <echo>-------------------------------------------------------------------------------</echo>
    <echo> - updateSpec       : make all transformations (uml -> metaModel -> others)    </echo>
    <echo>                      required for the specification                           </echo>
    <echo>-------------------------------------------------------------------------------</echo>
  </target>

  <!-- target init : timestamp -->
  <target name="init">
    <echo>-------------------------------------------------------------------------------</echo>
    <echo> project name     : ${dm.filename.prefix} </echo>
    <echo>-------------------------------------------------------------------------------</echo>
  </target>

  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
                                 vo-dml generation
       +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: run_vo-dml                                                     -->
  <!-- Description:  Run xmi2vo-dml, validate_vo-dml, vo-dml2html in sequence -->
  <!--               on each target model                                     -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="run_vo-dml" depends="set-ant-contrib" description="generate VO-DML/XML, validate it and generate HTML for all generated model, requires ant-contrib">
    <fail unless="models" message="Must define property 'models' in build.properties before running run_vo-dml_all target !" />
    <for list="${models}" param="model">
      <sequential>
	<ant target="run_xmi2vo-dml" inheritAll="true"/>
	<ant target="run_validate_vo-dml" inheritAll="true"/> 
	<ant target="run_vo-dml2html" inheritAll="true"/> 
      </sequential>
    </for>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: run_xmi2vo-dml                                                 -->
  <!-- Description:  Translate model(s) from XMI to vo-dml/xml                -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="run_xmi2vo-dml" depends="set-ant-contrib"
	  description="generate VO-DML/XML from XMI for all indicated models, requires ant-contrib">
    <fail unless="models" message="Must define property 'models' in build.properties before running run_vo-dml_all target !" />
    <for list="${models}" param="model">
      <sequential>
	<ant target="xmi2vo-dml" inheritall="false">
	  <property name="model" value="@{model}" />
	</ant>
      </sequential>
    </for>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: run_validate_vo-dml                                            -->
  <!-- Description:  validate vo-dml/xml model(s)                             -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="run_validate_vo-dml" depends="set-ant-contrib"  
	  description="validate all VO-MDL/XML models in the list of input models">
    <fail unless="ant.contrib.jar" message="ant.contrib.jar is not specified, use validate_vo-dml instead with single model in input variable"/>
    <fail unless="models" message="Must define property 'models' in build.properties before running run_vo-dml_all target !" />
    <for list="${models}" param="model">
      <sequential>
	<ant target="validate_vo-dml" inheritall="false">
	  <property name="model" value="@{model}"/>
	</ant>
      </sequential>
    </for>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: run_vo-dml2html                                                -->
  <!-- Description:  generate HTML documentation for model(s)                 -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="run_vo-dml2html" depends="set-ant-contrib" 
	  description="generate HTML documentation for all indicated models, requires ant-contrib">
    <fail unless="models" message="Must define property 'models' in build.properties before running run_vo-dml_all target !" />
    <for list="${models}" param="model">
      <sequential>
	<ant target="vo-dml2html" inheritall="false">
	  <property name="model" value="@{model}"/>
	</ant>
      </sequential>
    </for>
  </target>
  
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="run_vo-dml2rdf" depends="set-ant-contrib"  
	  description="generate HTML documentation for all indicated models, requires ant-contrib">
    <fail unless="models" message="Must define property 'models' in build.properties before running run_vo-dml_all target !" />
    <for list="${models}" param="model">
      <sequential>
	<ant target="vo-dml2rdf" inheritall="false">
	  <property name="model" value="@{model}"/>
	</ant>
      </sequential>
    </for>
  </target>
  
  
  <!-- =========================================================================================== -->
  <!-- Targets to be run when ant.contrib,jar is not set and input parameter in build.properties MUST identify a single model -->
  <!-- =========================================================================================== -->
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: schematron-compile                                             -->
  <!-- Description:                                                           -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="schematron-compile">
    <xslt2 basedir="." style="./schematron/iso_svrl_for_xslt2.xsl" in="${xsd}/vo-dml-v1.0.sch.xml" out="${xslt}/vo-dml.sch.xsl" />
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: xmi2vo-dml                                                     -->
  <!-- Description:  Translate single model from XMI to vo-dml/xml            -->
  <!--               then generate vodml-ids                                  -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="xmi2vo-dml" if="xmi.source">
    <fail unless="model" message="Must define property 'model' in build.properties !" />
    <fail unless="xmi.source.profile" message="Must define property 'xmi.source.profile' in ${model}/vo-dml.properties (the profile according to which XMI file is structured) !" />
    <echo> Running xmi2vo-dml for ${model}/${xmi.source}</echo>
    <xslt2 in="${model}/${xmi.source}" out="${vo-dml.dir}/__TEMP__.vo-dml.xml" style="${xslt}/xmi2vo-dml_${xmi.source.profile}.xsl">
    	<param name="vodmlSchemaNS" expression="${vodmlSchemaNS}" />   	
    	<param name="vodmlSchemaLocation" expression="${vodmlSchemaLocation}" />   	
    	</xslt2>
  	<!--
    <xslt2 in="${vo-dml.dir}/__TEMP__.vo-dml.xml" out="${vo-dml.dir}/DOCUMENTATION.xml" style="${xslt}/generate-documentation-list.xsl"/>
    -->
    <xslt2 in="${vo-dml.dir}/__TEMP__.vo-dml.xml" out="${vo-dml.dir}/${vo-dml.source}" style="${xslt}/generate-utypes4vo-dml.xsl"/>
  </target>
<!--  
  <target name="run-update-xmi-documentation" depends="set-ant-contrib" description="Updates documentation in original XMI document">
    <for list="${models}" param="model">
      <sequential>
      	<ant target="update-xmi-documentation" inheritall="false">
	  <property name="model" value="@{model}" />
	</ant>
      </sequential>
    </for>
  </target>
  <target name="update-xmi-documentation">
    <echo> Running update-xmi-documentation for ${model}/${xmi.source}</echo>
  	<property name="absolute.path" location="${model}"/>
    <xslt2 in="${model}/${xmi.source}" out="${model}/${xmi.source}.UPDATED.xml" style="${xslt}/update-xmi-documentation_${xmi.source.profile}.xsl">
    	<param name="DOC" expression="${absolute.path}/DOCUMENTATION.xml" />   	
    	</xslt2>
  </target>
-->
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: validate_vo-dml                                                -->
  <!-- Description:  validate vo-dml file using schematron schema             -->
  <!--               TODO add validation by schema itself                     -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="validate_vo-dml" depends="schematron-compile" if="model">
    <echo>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <echo>Validating against schema, writing :</echo>
    <echo>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <echo>Validating against schematron, output written to ${vo-dml.dir}/${vo-dml.source}.svrlt:</echo>
    <echo>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <xslt2 basedir="${xslt}" style="${xslt}/vo-dml.sch.xsl" in="${vo-dml.dir}/${vo-dml.source}" out="${vo-dml.dir}/${vo-dml.source}.svrlt" />
    
    <!-- find errors -->
    <echo>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <xslt2 basedir="." 
	   style="${xslt}/inspect-validation-result.xsl" 
	   in="${vo-dml.dir}/${vo-dml.source}.svrlt"
	   out="${vo-dml.dir}/validation.log">
      <param name="outputfile" expression="${vo-dml.source}.validation-report.txt" />
    </xslt2>
    <echo>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <record name="${vo-dml.dir}/${vo-dml.source}.validation-report.txt" action="start"  append="yes"/>
    <schemavalidate file="${vo-dml.dir}/${vo-dml.source}" failonerror="false" >
      <schema namespace="${vodmlSchemaNS}" url="${vodmlSchemaLocation}"/>
    </schemavalidate>
    <record name="${vo-dml.dir}/${vo-dml.source}.validation-report.txt" action="stop"/>
    <delete file="${vo-dml.dir}/validation.log" />	
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: vo-dml2html                                                    -->
  <!-- Description:  generate HTML documentation for a single model           -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="vo-dml2html" depends="vo-dml2gvd" if="model" >
    <echo>run_vo-dml2html : starting generate HTML from file ${model}/${dm.filename.prefix}</echo>
    <xslt2 in="${vo-dml.dir}/${vo-dml.source}" out="${html.dir}/${html.target}" style="${xslt}/vo-dml2html.xsl">
      <param name="project_name" expression="${dm.filename.prefix}" />
      <param name="graphviz_png" if="graphviz.path" expression="${graphviz.png}" />
      <param name="graphviz_map" if="graphviz.path" expression="${graphviz.map.placeholder}" />
      <param name="preamble" expression="${html.preamble}" />
    </xslt2>
    <ant target="postGenerateHTML" />
    <echo>run_vo-dml2html : done.</echo>
  </target>
  
	  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	  <!-- Target: vo-dml2python                                                    -->
	  <!-- Description:  generate python classes for a single model           -->
	  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	  <target name="vo-dml2python" if="model" >
	    <echo>run_vo-dml2python : starting generate python file ${model}/${dm.filename.prefix}</echo>
	    <xslt2 in="${vo-dml.dir}/${vo-dml.source}" out="${vo-dml.dir}/python/${python.target}" style="${xslt}/vo-dml2python.xsl">
	      <param name="project_name" expression="${dm.filename.prefix}" />
	    </xslt2>
	    <echo>run_vo-dml2python : done.</echo>
	  </target>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: vo-dml2gvd                                                     -->
  <!-- Description:  generates Object Graphs (graphviz tool) for a single     -->
  <!--               vo-dml model, then generate model diagrams and a cmap    -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="vo-dml2gvd" if="graphviz.path">
    <fail unless="model" message="Must define property 'model' !" />
    <echo>run_vo-dml2gvd : starting generate GraphViz from file ${vo-dml.dir}/${vo-dml.source}</echo>
    <xslt2 in="${vo-dml.dir}/${vo-dml.source}" out="${html.dir}/${graphviz.gvd}" style="${xslt}/vo-dml2gvd.xsl" />
    <exec executable="${graphviz.path}" dir="${html.dir}">
      <arg value="-Tcmapx" /> 
      <arg value="-o${graphviz.map}" />
      <arg value="-Tpng" />
      <arg value="-o${graphviz.png}" />
      <arg value="${graphviz.gvd}" />
    </exec>
    <echo>run_vo-dml2gvd : done.</echo>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- Target: postGenerateHTML                                               -->
  <!-- Description:                                                           -->
  <!--   if a cmap file is created, insert it in the HTML file                -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="postGenerateHTML" if="graphviz.path">
    <loadfile property="map" srcfile="${html.dir}/${graphviz.map}" />
    <replace file="${html.dir}/${html.target}" token="${graphviz.map.placeholder}" value="${map}" />
  </target>
  
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="validate_vo-dml-instance" >
    <echo>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <echo>Validating against schema, writing :</echo>
    <schemavalidate file="${vo-dml-instance.file}" failonerror="false" >
      <schema namespace="http://volute.g-vo.org/dm/vo-dml-instance/v0.x" file="${xsd}/vo-dml-instance.xsd"/>
    </schemavalidate>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="validateVOTable" description="For testing an annotated VOTable file against the updated VOTable schema">
    <schemavalidate file="${votable.file}" failonerror="false" >
      <schema namespace="http://www.ivoa.net/xml/VOTable/v1.4_vodml" 
	      file="${xsd}/ext/VOTable-1.4_vodml.xsd"/>
    </schemavalidate>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="vo-dml2rdf" if="model"> 
    <echo>vo-dml2html : starting generate RDF from file ${model}/${dm.file.prefix}</echo>
    <xslt2 in="${model}/${vo-dml.source}" out="${model}/${rdf.target}" style="${xslt}/vo-dml2rdf.xsl"/>
    <echo>run_vo-dml2rdf : done.</echo>
  </target>
  
	  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!--
	<target name="run_vo-dml2python"  depends="set-ant-contrib"   description="Generate python classes for vo-dml model">
	    <echo>run_vo-dml2python : starting generate python code for model in </echo>
	    <fail unless="models" message="Must define property 'models' in build.properties before running run_vo-dml_all target !" />
	    <for list="${models}" param="model">
	      <sequential>
		<ant target="vo-dml2python" inheritall="false">
		  <property name="model" value="@{model}"/>
		</ant>
	      </sequential>
	    </for>
	  </target>
-->	  
	
	
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="run_vo-dml2pojo"   description="Generate POJO java classes for all models identified in mapping.file">
    <fail unless="mapping.file" message="Must define property 'mapping.file' in build.properties (the source VO-DML file) !" />
    <echo>run_vo-dml2pojo : starting generate Java code for all models in mapping file ${mapping.file}</echo>
    <xslt2 in="${mapping.file}" out="${java.gen}/run_pojo.txt" style="${xslt}/vo-dml2pojo.xsl">
      <param name="mapping_file" expression="${mapping.file}" />
      <param name="vo-dml_package" expression="${vodml.package}" />
    </xslt2>
    <ant target="format"/>
  </target>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <target name="run_vo-dml2xsd"   description="Generate XML schema files for all models identified in mapping.file">
    <fail unless="mapping.config.file" message="Must define property 'mapping.file' in build.properties (the source VO-DML file) !" />
    <echo>run_vo-dml2xsd : starting generate XML schema files for all models in mapping file ${mapping.file}</echo>
    <xslt2 in="${mapping.config.file}" out="${xsd.gen}/run_xsd.txt" style="${xslt}/vo-dml2xsd.xsl">
      <param name="mapping_file" expression="${mapping.config.file}" />
      <param name="schemalocation_root" expression="${schemalocation_root}" />
    </xslt2>
  </target>
  
  
  <!-- transformation from XSD to Java classes suited for XmlPullParser -->
  <target name="run_vo-dml-xsd2java"   description="Generate Java classes form XML schema">
    <echo>run_xsd2java : starting generate XML schema files for all models in mapping file ${mapping.file}</echo>
    <xslt2 in="${xsd}/vo-dml-v1.0.xsd" out="${sources}/log_xsd2pojo.txt" style="${xslt}/xsd2pojo.xsl">
      <param name="dir" expression="org/ivoa/vodml/xml/gen" />
      <param name="package" expression="org.ivoa.vodml.xml.gen" />
    </xslt2>
  </target>
  
  
  <!-- include java realated targets for compiling generated code and generating some infrastructure classes
       using JAXB. Latter targets require value for jaxb.dir property in build.properties -->
  <!--  
    -->
  &buildJava; 
  
</project>
