<?xml version="1.0" encoding="UTF-8"?>
<sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt3"
	        xmlns:fct="localFunctions"
            xmlns:vf="http://www.ivoa.net/xml/VODML/functions"
            xmlns:xs="http://www.w3.org/2001/XMLSchema"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<sch:ns uri="http://www.ivoa.net/xml/VODML/v1" prefix="vo-dml"/>
    <sch:ns prefix="fct" uri="localFunctions"/>
    <sch:ns prefix="vf" uri="http://www.ivoa.net/xml/VODML/functions"/>
   <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>

<sch:title>Schematron VO-DML Validator</sch:title>

    <xsl:include href="classpath:xslt/common-structure-functions.xsl"/>

<xsl:function name="fct:vo-dml_element_kind" as="xs:string">
    <!--  returns name of element containing the vodml-id identified by the vodml-ref -->
        <xsl:param name="vodml-ref" />
		<xsl:variable name="prefix" select="substring-before($vodml-ref,':')" />
        <xsl:choose>
            <xsl:when test="$models/key('ellookup',$vodml-ref)">
                <xsl:value-of select="$models/key('ellookup',$vodml-ref)/name()" />
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="concat('ERROR as cannot find ',$vodml-ref,
                        ' in current and imported models (', string-join($models/vo-dml:model/name,','),')' )" />
            </xsl:otherwise>
        </xsl:choose>
   </xsl:function>
    <!-- this function should load all of the imported models -->
    <xsl:function name="fct:loadImports" as="document-node()*" >
        <!--TODO  implement recursive model lookup (still not sure it this is expected see https://github.com/ivoa/vo-dml/issues/7) -->
        <xsl:param name="root" as="document-node()"/>
<!--        <xsl:message>importing models used by <xsl:value-of select="$root/vo-dml:model/name"/> ...</xsl:message>-->
        <xsl:sequence>
            <xsl:copy-of select="$root"/>
        <xsl:choose>
        <xsl:when test="$root/vo-dml:model/import">
        <xsl:for-each select="$root/vo-dml:model/import">
<!--                <xsl:message>opening imported model in <xsl:value-of select="url"/> </xsl:message>-->
                <xsl:copy-of
                        select="document(url)" />
            </xsl:for-each>
        </xsl:when>
        </xsl:choose>
        </xsl:sequence>
    </xsl:function>

    <!-- this global variable can then be used for model lookup -->
    <sch:let name="models" value="fct:loadImports(/)"/>

    <sch:pattern name="imports_succeeded">
        <sch:rule context="import[last()]">
            <sch:let name="count" value="count($models/vo-dml:model)"/>
            <sch:assert test="$count >= count(../import)" flag="error">
all model imports did not succeed (only <sch:value-of select="$count"/>)
            </sch:assert>
        </sch:rule>
    </sch:pattern>

    <!--TODO put in multiple phases - i.e. test import basics first to avoid flooding with error messages -->

    <!-- Check that a model import exists for a vodml-ref with prefix not equal to vodml-ref of the model. -->
    <sch:pattern name="RemoteModelImport">
        <sch:rule context="vodml-ref[substring-before(text(),':') != '' and substring-before(text(),':') != /vo-dml:model/name]">
            <sch:let name="prefix" value="substring-before(text(),':')"/>
            <sch:assert test="$prefix = $models/vo-dml:model/name"  flag="error">
                There is no imported model corresponding to model prefix '<sch:value-of select="$prefix"/>' in this model.
            </sch:assert>
        </sch:rule>
        <sch:rule context="import">
            <sch:let name="impname" value="document(url)/vo-dml:model/name"/>
            <sch:let name="impvers" value="document(url)/vo-dml:model/version"/>
            <sch:assert test="name = $impname"  flag="error">
                The imported model namespace <sch:value-of select="concat('&quot;',$impname,'&quot;', ' for import of ', url,' is not the expected &quot;', name,'&quot;')"/>
            </sch:assert>
            <sch:assert test="version" flag="warning">
                the imported model version has not been specified for the import of model '<sch:value-of select="$impname"/>'
            </sch:assert>
            <sch:assert test="version = $impvers"  flag="error">
                The imported model version=<sch:value-of select="concat('&quot;',$impvers,'&quot;', ' for import of ', url,' is not the expected &quot;', version,'&quot;')"/>
            </sch:assert>
        </sch:rule>

    </sch:pattern>

<sch:pattern name="Unique_vodml-id">
  <sch:rule context="vodml-id[not(../name() = 'vo-dml:model')]">
    <sch:let name="count" value="count(./following::vodml-id[. = current()])"/>
    <sch:assert test="$count = 0" flag="error">
vodml-id '<sch:value-of select="."/>' is not unique, there are <sch:value-of select="$count"/> other elements with same vodml-id in this model.
    </sch:assert>
  </sch:rule>
</sch:pattern>

    <!-- test that the vodml-id follows standard format - looks like a UTYPE ;-) -->
    <sch:pattern name="vodml-id_form">
        <sch:rule context="vodml-id[not(../name() = 'vo-dml:model')]">
            <!-- original intention was / between packages? -->
            <sch:let name="form" value="string-join(ancestor::*/name[not(../name() = 'vo-dml:model')], '.')"/>
            <sch:assert test="$form = ." flag="error">
                vodml-id '<sch:value-of select="."/>' does not follow standard form '<sch:value-of select="$form"/>'
            </sch:assert>
        </sch:rule>
    </sch:pattern>




    <sch:pattern name="Unique_name">
        <sch:rule context="(attribute|reference|composition|literal)/name">
            <sch:let name="count" value="count(../preceding-sibling::*/name[. = current()])"/>
            <sch:assert test="$count = 0" flag="error">
                name '<sch:value-of select="."/>' is not unique! There are other members with same name in <sch:value-of select="concat(../../name(),' ',../../vodml-id)"/> .
            </sch:assert>
        </sch:rule>
    </sch:pattern>

    <sch:pattern name="Single_Inheritance">
        <sch:rule context="objectType|dataType|enumeration|primitiveType">
            <sch:let name="count" value="count(extends)"/>
            <sch:assert test="$count &lt; 2" flag="error">
                <sch:value-of select="./vodml-id"/> has more than one extends relation.
            </sch:assert>
        </sch:rule>
    </sch:pattern>

  <!-- it is ok to have abstract types for attributes
    <sch:pattern name="no_abstract_attributes">
        <sch:rule context="attribute">
            <sch:let name="atttype" value="$models/key('ellookup',current()/datatype/vodml-ref)"/>
            <sch:let name="parent" value="current()/parent::*"/>

            <sch:assert test="not($atttype/@abstract) or ($atttype/@abstract and $parent/@abstract)" flag="error">
               attribute <sch:value-of select="vf:asvodmlref(current())"/> has abstract type even though the parent object is not abstract.
            </sch:assert>
        </sch:rule>
    </sch:pattern>

  -->

    <sch:pattern name="Unique_composition">
        <!-- Note - this is probably really only a problem if the multiply contained thing also contains or references something -->
  <sch:rule context="composition/datatype/vodml-ref">
    <sch:let name="count" value="count(distinct-values(//composition/datatype/vodml-ref[. = current()]/ancestor::objectType))"/>
    <sch:let name="container" value="vf:asvodmlref(current()/ancestor::objectType)"/>
    <sch:assert test="$count = 1" flag="warning">
objecttype <sch:value-of select="."/> is used more than once, as target of composition relation. In this case for containing objectType <sch:value-of select="$container"/>
        ** (this message will repeat itself <sch:value-of select="$count"/> times!, once for each different container) **
    </sch:assert>
  </sch:rule>
</sch:pattern>

<sch:pattern name="vodml-refs-check">
  <sch:rule context="objectType/attribute | dataType/attribute">
    <sch:let name="owner" value="vf:asvodmlref(current())"/>
    <sch:assert test="vf:vo-dml-ref-exists(datatype/vodml-ref)" flag="error">
vodml-ref  <sch:value-of select="datatype/vodml-ref"/> for type of  <sch:value-of select="$owner"/> does not exist
    </sch:assert>

    <sch:let name="target" value="fct:vo-dml_element_kind(datatype/vodml-ref)"/>
    <sch:assert test="$target = 'primitiveType' or $target = 'dataType' or $target='enumeration'" flag="error">
type <sch:value-of select="datatype/vodml-ref"/> of <sch:value-of select="$owner"/> is not a value type but a '<sch:value-of select="$target"/>'
    </sch:assert>
  </sch:rule>

    <sch:rule context="reference">
        <sch:let name="owner" value="vf:asvodmlref(current())"/>
        <sch:let name="reftype-vodml-ref" value="current()/datatype/vodml-ref"/>
        <sch:let name="parent" value="vf:asvodmlref(current()/(ancestor::objectType|ancestor::dataType))"/>
        <sch:assert test="vf:vo-dml-ref-exists($reftype-vodml-ref)" flag="error">
            vodml-ref  <sch:value-of select="$reftype-vodml-ref"/> for type of  <sch:value-of select="$owner"/> does not exist
        </sch:assert>
        <sch:let name="target" value="fct:vo-dml_element_kind($reftype-vodml-ref)"/>
        <sch:let name="incomposition" value="count(//objectType[composition/datatype/vodml-ref = $reftype-vodml-ref]) != 0" />
        <sch:assert test="$target = 'objectType'" flag="error">
            type <sch:value-of select="datatype/vodml-ref"/> of reference <sch:value-of select="$owner"/> is not an object type but a '<sch:value-of select="$target"/>'
        </sch:assert>
        <sch:let name="refcontainers" value="vf:ContainerHierarchy($reftype-vodml-ref,$models/vo-dml:model/name)" />
        <sch:let name="pcontainers" value="($parent,vf:ContainerHierarchy($parent,$models/vo-dml:model/name))" />

        <!--warn if a reference "lives" in a composition rather than freestanding in the whole model     -->
      <sch:assert test="not ($incomposition) or ( $incomposition and $refcontainers = $pcontainers ) " flag="warn">
            Reference <sch:value-of select="$reftype-vodml-ref"/> used in <sch:value-of select="./vodml-id"/> is in unrelated composition hierarchy <sch:value-of select="string-join($refcontainers,',')"/> which has lifecycle implications (i.e. the reference could disappear unless code is aware of relationship)
      </sch:assert>
    </sch:rule>


  <sch:rule context="objectType/composition">
    <sch:let name="owner" value="vf:asvodmlref(current())"/>
    <sch:let name="target" value="fct:vo-dml_element_kind(datatype/vodml-ref)"/>
    <sch:assert test="$target = 'objectType'" flag="error">
datatype <sch:value-of select="datatype/vodml-ref"/> of composition <sch:value-of select="$owner"/> is not an object type but a '<sch:value-of select="$target"/>'
    </sch:assert>
  </sch:rule>

  <sch:rule context="objectType/extends">
    <sch:let name="owner" value="vf:asvodmlref(current()/parent::*)"/>
    <sch:let name="target" value="fct:vo-dml_element_kind(vodml-ref)"/>
    <sch:assert test="$target = 'objectType'" flag="error">
Super type <sch:value-of select="vodml-ref"/> of objectType <sch:value-of select="$owner"/> is not an object type but a '<sch:value-of select="$target"/>'
    </sch:assert>
  </sch:rule>

  <sch:rule context="dataType/extends">
    <sch:let name="owner" value="vf:asvodmlref(current()/parent::*)"/>
    <sch:let name="target" value="fct:vo-dml_element_kind(vodml-ref)"/>
    <sch:assert test="$target = 'dataType'" flag="error">
Super type <sch:value-of select="vodml-ref"/> of dataType/extends <sch:value-of select="$owner"/> is not a data type but a '<sch:value-of select="$target"/>'
    </sch:assert>
  </sch:rule>


<sch:rule context="attribute/multiplicity">
  <sch:let name="owner" value="vf:asvodmlref(current()/parent::*)"/>
    <sch:let name="type" value="current()/parent::*/datatype/vodml-ref"/>
  <sch:let name="kind" value="fct:vo-dml_element_kind(current()/parent::*/datatype/vodml-ref)"/>
    <sch:let name="minOccurs" value="./minOccurs"/>
    <sch:let name="maxOccurs" value="./maxOccurs"/>
  <sch:assert test="($kind = 'dataType' and $maxOccurs = '1') or $kind=('primitiveType','enumeration')" flag="error">
      Attribute <sch:value-of select="./../vodml-id"/> has multiplicity <sch:value-of select="concat($minOccurs,'..',$maxOccurs)"/> for <sch:value-of select="concat($type,' which is a ',$kind)"/>
  </sch:assert>
  <sch:report test="$kind=('primitiveType','enumeration') and number($maxOccurs) != 1" flag="warning">
Attribute <sch:value-of select="concat(./../vodml-id,' (type ',$type,' which is a ',$kind,')')"/> has multiplicity <sch:value-of select="concat($minOccurs,'..',$maxOccurs)"/> which is STRONGLY DISCOURAGED but can be supported for primitive types
  </sch:report>
 </sch:rule>



    <!-- rules on subsets can be rather complex.
    A subsets element must be owned by a constraint on a type restricting a role on one of its super-types.
    The subsets constraints must identify a datatype for the inherited role that is a subtype of the type
    defined on the role.
    The owner of the constraint must be a subtype of the owner of the subsetted role.
    Problem: need not be direct subtypes, i.e. need recursion.
    The roles must be of the same type (ie.e both attributes, or references or compositions).
    The roles must have same name (TBD correct?)
    also, constraint must have n xsi:type identifying it a such.
    OR shall we create a separate roleConstraint element? on structured types only.
    -->
  <sch:rule context="constraint[@xsi:type='vo-dml:SubsettedRole']">
    <sch:let name="owner" value="../name()"/>
    <sch:let name="target" value="fct:vo-dml_element_kind(./role/vodml-ref)"/>
    <sch:let name="dtype" value="fct:vo-dml_element_kind(./datatype/vodml-ref)"/>
    <sch:assert test="$target" flag="error">
Target role of subsets constraint on '<sch:value-of select="../vodml-id"/>' with vodml-ref <sch:value-of select="./role/vodml-ref"/> can not be found
    </sch:assert>
    <sch:assert test="$dtype" flag="error">
Target datatype of subsets constraint on '<sch:value-of select="../vodml-id"/>' with vodml-ref <sch:value-of select="./datatype/vodml-ref"/> can not be found
    </sch:assert>
<!--
    <sch:assert test="$target = $owner" flag="error">
Role '<sch:value-of select="../vodml-id"/>' with subsets relation of type '<sch:value-of select="$owner"/>' MUST have same type as subsetted role (<sch:value-of select="$target"/>)
    </sch:assert>
 -->
   </sch:rule>

<!-- TODO more rules need implementing
- objectType can only be contained in one other objecttype
- same, including inheritance (i.e. recursive, more tricky in Schematron?)
-...
 -->

</sch:pattern>


</sch:schema>
