<?xml version="1.0" encoding="UTF-8"?>
<!--
This will produce a tap schema representation of a data model.

FIXME This is not yet complete
* no support for type inheritance
* no datatype mapping to columns not done
* subsetting rules not done
 -->


<!DOCTYPE stylesheet [
        <!ENTITY cr "<xsl:text>
</xsl:text>">
        <!ENTITY bl "<xsl:text> </xsl:text>">
        ]>

<xsl:stylesheet version="3.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:vo-dml="http://www.ivoa.net/xml/VODML/v1"
                xmlns:vf="http://www.ivoa.net/xml/VODML/functions"
                xmlns:bnd="http://www.ivoa.net/xml/vodml-binding/v0.9.1"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:tap="http://ivoa.net/dm/tapschema/v1"
                exclude-result-prefixes="bnd vf vo-dml"
        expand-text="true"
>


  <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes" />

  <xsl:strip-space elements="*" />

  <!-- Input parameters -->
  <xsl:param name="lastModifiedText"/>
  <xsl:param name="binding"/>

  <xsl:include href="binding_setup.xsl"/>

  <xsl:variable name="xsd-ns">http://www.w3.org/2001/XMLSchema</xsl:variable>

  <xsl:variable name="modelname" select="/vo-dml:model/name"/>

 <!-- main pattern : processes for root node model -->
  <xsl:template match="/">
    <xsl:apply-templates/>
  </xsl:template>

  <xsl:template match="vo-dml:model">


    <xsl:message >Generating TAPSchema for  <xsl:value-of select="$modelname "/> - considering models <xsl:value-of select="string-join($models/vo-dml:model/name,', ')" /></xsl:message>

      <xsl:comment>Generated by gradle vo-dml tools <xsl:value-of select="current-dateTime()"/></xsl:comment>
      <tap:tapschemaModel>
      <refs/>
        <schema>
         <schema_name>{name}</schema_name>
         <description>{description}</description>

       <tables>
       <xsl:apply-templates select="objectType"/>

        <xsl:apply-templates select="package"/>
        <!-- TODO should do imports -->
       </tables>
        </schema>
      </tap:tapschemaModel>
  </xsl:template>






  <xsl:template match="package">
    <xsl:apply-templates select="objectType"/>
    <xsl:apply-templates select="package"/>
  </xsl:template>


  <xsl:template match="objectType" >
   <xsl:variable name="vodml-ref" select="vf:asvodmlref(current())"/>
   <table>
     <table_name>{vf:rdbTableName($vodml-ref)}</table_name>
       <table_type>table</table_type>
       <utype>{$vodml-ref}</utype>
       <description>{description}</description>
       <columns>
           <xsl:if test="count(attribute/constraint[ends-with(@xsi:type,':NaturalKey')]) = 0">
             <!--add the primary key column -->
             <column>
                 <column_name>{vf:rdbIDColumnName($vodml-ref)}</column_name>
                 <datatype>BIGINT</datatype>
                 <description>primary key for {name}</description>
                 <indexed>true</indexed>
                 <principal>false</principal>
                 <std>true</std> <!--IMPL if generated from VO-DML - should be a standard -->

             </column>
               <xsl:apply-templates select="$models//composition[datatype/vodml-ref=$vodml-ref]" mode="fkeyColumn"/>
           </xsl:if>
        <xsl:apply-templates select="(attribute|reference|composition)" mode="defn"/>
       </columns>
       <fkeys>
           <xsl:apply-templates select="reference" mode="fkey"/>
           <xsl:apply-templates select="$models//composition[datatype/vodml-ref=$vodml-ref]" mode="fkey"/>
       </fkeys>
   </table>

  </xsl:template>

    <xsl:template match="attribute[not(vf:isDataType(.))]" mode="defn" >
        <xsl:variable name="vodml-ref" select="vf:asvodmlref(current())"/>
        <column>
            <column_name>{vf:tapcolumnName($vodml-ref)}</column_name>
            <xsl:comment>attribute of {vf:typeRole(datatype/vodml-ref)} {datatype/vodml-ref}</xsl:comment>
            <datatype>{vf:rdbTapType(datatype/vodml-ref)}</datatype>
            <description>{description}</description>
            <utype>{$vodml-ref}</utype>
            <indexed>{count(constraint[ends-with(@xsi:type,':NaturalKey')])> 0}</indexed>
            <principal>false</principal><!-- FIXME need a way of actually specifying this -->
            <std>true</std><!--IMPL if generated from VO-DML - should be a standard -->
        </column>
    </xsl:template>

    <xsl:template match="attribute[vf:isDataType(.)]" mode="defn" >
        <xsl:variable name="vodml-ref" select="vf:asvodmlref(current())"/>
        <!-- FIXME need to deal with datatypes properly -->
        <column>
            <column_name>{vf:tapcolumnName($vodml-ref)}</column_name>
            <xsl:comment>attribute of {vf:typeRole(datatype/vodml-ref)} {datatype/vodml-ref}</xsl:comment>
            <datatype>DATATYPE</datatype>
            <description>{description}</description>
            <utype>{$vodml-ref}</utype>
            <indexed>{count(constraint[ends-with(@xsi:type,':NaturalKey')])> 0}</indexed>
            <principal>false</principal><!-- FIXME need a way of actually specifying this -->
            <std>true</std><!--IMPL if generated from VO-DML - should be a standard -->
        </column>
    </xsl:template>

    <xsl:template match="reference" mode="defn">
        <column>
        <xsl:variable name="vodml-ref" select="vf:asvodmlref(current())"/>
        <column_name>{vf:tapcolumnName($vodml-ref)}</column_name>
        <xsl:comment>reference to {datatype/vodml-ref}</xsl:comment>
        <datatype>{vf:rdbKeyType(datatype/vodml-ref)}</datatype>
        <description>{description}</description>
        <utype>{$vodml-ref}</utype>
        <indexed>false</indexed><!-- IMPL or true?! -->
        <principal>false</principal><!-- FIXME need a way of actually specifying this -->
        <std>true</std><!--IMPL if generated from VO-DML - should be a standard -->
        </column>
    </xsl:template>
    <xsl:template match="composition" mode="defn">
        <column>
            <xsl:variable name="vodml-ref" select="vf:asvodmlref(current())"/>
            <column_name>{vf:tapcolumnName($vodml-ref)}</column_name>
            <xsl:comment>composition of {datatype/vodml-ref}</xsl:comment>
            <datatype>{vf:rdbKeyType(datatype/vodml-ref)}</datatype>
            <description>{description}</description>
            <utype>{$vodml-ref}</utype>
            <indexed>false</indexed><!-- IMPL or true?! -->
            <principal>false</principal><!-- FIXME need a way of actually specifying this -->
            <std>true</std><!--IMPL if generated from VO-DML - should be a standard -->
        </column>
    </xsl:template>

    <xsl:template match="reference" mode="fkey">
        <ForeignKey>
            <xsl:variable name="vodml-ref" select="vf:asvodmlref(current())"/>
            <key_id>{vf:tapFkeyID($vodml-ref)}</key_id>
            <xsl:comment>reference to {datatype/vodml-ref}</xsl:comment>

            <description>{description}</description>
            <utype>{$vodml-ref}</utype>
            <columns>
                <FKColumn>
                    <from_column>{vf:tapcolumnName($vodml-ref)}</from_column>
                    <target_column>{vf:tapcolumnIndexID(datatype/vodml-ref)}</target_column>
                </FKColumn>
            </columns>
            <target_table>{vf:rdbTableName(datatype/vodml-ref)}</target_table>
        </ForeignKey>
    </xsl:template>

    <xsl:template match="composition" mode="fkey">

        <ForeignKey>
            <xsl:variable name="vodml-ref" select="vf:asvodmlref(current())"/>
            <xsl:variable name="target" select="vf:asvodmlref(current()/parent::*)"/>
            <key_id>{vf:tapFkeyID($vodml-ref)}</key_id>
            <xsl:comment>back reference to {datatype/vodml-ref} composition of {$target} </xsl:comment>

            <description>foreign key for {datatype/vodml-ref} composition of {$target} </description>
            <utype>{$vodml-ref}</utype> <!-- IMPL not sure is this is the appropriate utype -->
            <columns>
                <FKColumn>
                    <from_column>{vf:tapcolumnName($vodml-ref)}</from_column>
                    <target_column>{vf:tapcolumnIndexID($target)}</target_column>
                </FKColumn>
            </columns>
            <target_table>{vf:rdbTableName($target)}</target_table>
        </ForeignKey>
    </xsl:template>
    <xsl:template match="composition" mode="fkeyColumn">
        <column>
            <!-- thing that we are pointing to is the parent of the composition -->
            <xsl:variable name="vodml-ref" select="vf:asvodmlref(current()/parent::*)"/>
            <column_name>{concat('FK_',vf:tapcolumnIndexID($vodml-ref))}</column_name>
            <xsl:comment>foreign key column for {$vodml-ref}</xsl:comment>
            <datatype>{vf:rdbKeyType($vodml-ref)}</datatype>
            <description>foreign key column for {$vodml-ref}</description>
            <utype>{$vodml-ref}</utype>
            <indexed>false</indexed><!-- IMPL or true?! -->
            <principal>false</principal><!-- FIXME need a way of actually specifying this -->
            <std>true</std><!--IMPL if generated from VO-DML - should be a standard -->
        </column>
    </xsl:template>

    <!-- need to make the columnID unique over whole document - done by prepending the table name
    this will have to be removed before writing to tapschema db -->
    <xsl:function name="vf:tapcolumnName" as="xsd:string" >
        <xsl:param name="vodml-ref" as="xsd:string" />
        <xsl:variable name="el" select="$models/key('ellookup',$vodml-ref)"/>
        <xsl:sequence select="concat($el/parent::*/name,'.',$el/name)"/>
    </xsl:function>
    <!-- make a reference to a column -->
    <xsl:function name="vf:tapcolumnIndexID" as="xsd:string" >
        <xsl:param name="vodml-ref" as="xsd:string" />
        <xsl:variable name="el" select="$models/key('ellookup',$vodml-ref)"/>
        <xsl:variable name="supers" select="($el,vf:baseTypes($vodml-ref))"/>
        <xsl:choose>
            <xsl:when test="$supers/attribute[ends-with(constraint/@xsi:type,':NaturalKey')]">
                <xsl:sequence select="concat($el/name,'.',$supers/attribute[ends-with(constraint/@xsi:type,':NaturalKey')]/name)"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:sequence select="concat($el/name,'.',vf:rdbIDColumnName($el))"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
    <xsl:function name="vf:tapFkeyID" as="xsd:string" >
        <xsl:param name="vodml-ref" as="xsd:string" />
        <xsl:variable name="el" select="$models/key('ellookup',$vodml-ref)"/>
        <xsl:sequence select="concat('FK_',$el/parent::*/name,'.',$el/name)"/>
    </xsl:function>


</xsl:stylesheet>
